{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@spree/storefront-api-v2-sdk/webpack/universalModuleDefinition","webpack://@spree/storefront-api-v2-sdk/./src/Client.ts","webpack://@spree/storefront-api-v2-sdk/./src/Http.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Account.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Authentication.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Cart.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Checkout.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Countries.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Order.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Pages.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Products.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/Taxons.ts","webpack://@spree/storefront-api-v2-sdk/./src/endpoints/index.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/BasicSpreeError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/CastError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/DeserializeError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/DocumentRelationshipError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/ExpandedSpreeError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/FetchError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/MisconfigurationError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/NoResponseError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/SpreeError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/SpreeSDKError.ts","webpack://@spree/storefront-api-v2-sdk/./src/errors/index.ts","webpack://@spree/storefront-api-v2-sdk/./src/fetchers/createAxiosFetcher.ts","webpack://@spree/storefront-api-v2-sdk/./src/fetchers/createFetchFetcher.ts","webpack://@spree/storefront-api-v2-sdk/./src/helpers/auth.ts","webpack://@spree/storefront-api-v2-sdk/./src/helpers/createFetcherFromType.ts","webpack://@spree/storefront-api-v2-sdk/./src/helpers/jsonApi.ts","webpack://@spree/storefront-api-v2-sdk/./src/helpers/result.ts","webpack://@spree/storefront-api-v2-sdk/./src/index.ts","webpack://@spree/storefront-api-v2-sdk/./src/interfaces/errors/ErrorClass.ts","webpack://@spree/storefront-api-v2-sdk/./src/makeClient.ts","webpack://@spree/storefront-api-v2-sdk/./src/routes.ts","webpack://@spree/storefront-api-v2-sdk/external \"axios\"","webpack://@spree/storefront-api-v2-sdk/external \"lodash/get\"","webpack://@spree/storefront-api-v2-sdk/external \"qs\"","webpack://@spree/storefront-api-v2-sdk/webpack/bootstrap","webpack://@spree/storefront-api-v2-sdk/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn ","import { Account, Products, Taxons, Countries, Cart, Checkout, Authentication, Order, Pages } from './endpoints'\nimport createFetcherFromType from './helpers/createFetcherFromType'\nimport type { Fetcher, IClientConfig, OptionalIClientConfig } from './interfaces/ClientConfig'\n\nclass Client {\n  public products: Products\n  public taxons: Taxons\n  public countries: Countries\n  public cart: Cart\n  public checkout: Checkout\n  public authentication: Authentication\n  public account: Account\n  public order: Order\n  public pages: Pages\n\n  protected host: string\n  protected fetcher: Fetcher\n\n  constructor(customOptions?: OptionalIClientConfig) {\n    const spreeHostEnvironmentValue: string | null = (globalThis.process && globalThis.process.env.SPREE_HOST) || null\n\n    const defaultOptions: IClientConfig = {\n      host: spreeHostEnvironmentValue || 'http://localhost:3000/',\n      fetcherType: 'axios'\n    }\n\n    const options: IClientConfig = {\n      ...defaultOptions,\n      ...customOptions\n    }\n\n    this.fetcher = createFetcherFromType({\n      host: options.host,\n      fetcherType: options.fetcherType,\n      createFetcher: options['createFetcher']\n    })\n\n    this.addEndpoints()\n  }\n\n  protected addEndpoints(): void {\n    this.account = this.makeAccount()\n    this.authentication = this.makeAuthentication()\n    this.cart = this.makeCart()\n    this.checkout = this.makeCheckout()\n    this.countries = this.makeCountries()\n    this.order = this.makeOrder()\n    this.pages = this.makePages()\n    this.products = this.makeProducts()\n    this.taxons = this.makeTaxons()\n  }\n\n  protected makeAccount(): Account {\n    return new Account({ fetcher: this.fetcher })\n  }\n\n  protected makeAuthentication(): Authentication {\n    return new Authentication({ fetcher: this.fetcher })\n  }\n\n  protected makeCart(): Cart {\n    return new Cart({ fetcher: this.fetcher })\n  }\n\n  protected makeCheckout(): Checkout {\n    return new Checkout({ fetcher: this.fetcher })\n  }\n\n  protected makeCountries(): Countries {\n    return new Countries({ fetcher: this.fetcher })\n  }\n\n  protected makeOrder(): Order {\n    return new Order({ fetcher: this.fetcher })\n  }\n\n  protected makePages(): Pages {\n    return new Pages({ fetcher: this.fetcher })\n  }\n\n  protected makeProducts(): Products {\n    return new Products({ fetcher: this.fetcher })\n  }\n\n  protected makeTaxons(): Taxons {\n    return new Taxons({ fetcher: this.fetcher })\n  }\n}\n\nexport default Client\n","import {\n  BasicSpreeError,\n  ExpandedSpreeError,\n  MisconfigurationError,\n  NoResponseError,\n  SpreeError,\n  SpreeSDKError\n} from './errors'\nimport FetchError from './errors/FetchError'\nimport * as result from './helpers/result'\nimport type { Fetcher } from './interfaces/ClientConfig'\nimport { ErrorClass } from './interfaces/errors/ErrorClass'\nimport type { FetchConfig, HttpMethod } from './interfaces/FetchConfig'\nimport type { JsonApiResponse } from './interfaces/JsonApi'\nimport type { ResultResponse } from './interfaces/ResultResponse'\nimport type { IToken } from './interfaces/Token'\n\nexport type EndpointOptions = {\n  fetcher: Fetcher\n}\n\nexport default class Http {\n  public fetcher: Fetcher\n\n  constructor({ fetcher }: EndpointOptions) {\n    this.fetcher = fetcher\n  }\n\n  protected async spreeResponse<ResponseType = JsonApiResponse>(\n    method: HttpMethod,\n    url: string,\n    tokens: IToken = {},\n    params: any = {}\n  ): Promise<ResultResponse<ResponseType>> {\n    try {\n      const headers = this.spreeOrderHeaders(tokens)\n\n      const fetchOptions: FetchConfig = {\n        url,\n        params,\n        method,\n        headers\n      }\n\n      const response = await this.fetcher.fetch(fetchOptions)\n\n      return result.makeSuccess(response.data)\n    } catch (error) {\n      return result.makeFail(this.processError(error))\n    }\n  }\n\n  /**\n   * The HTTP error code returned by Spree is not indicative of its response shape.\n   * This function determines the information provided by Spree and uses everything available.\n   */\n  protected classifySpreeError(error: FetchError): ErrorClass {\n    const { error: errorSummary, errors } = error.data\n\n    if (typeof errorSummary === 'string') {\n      if (typeof errors === 'object') {\n        return ErrorClass.FULL\n      }\n      return ErrorClass.BASIC\n    }\n    return ErrorClass.LIMITED\n  }\n\n  protected processError(error: Error): SpreeSDKError {\n    if (error instanceof FetchError) {\n      if (error.response) {\n        // Error from Spree outside HTTP 2xx codes\n        return this.processSpreeError(error)\n      }\n\n      if (error.request) {\n        // No response received from Spree\n        return new NoResponseError()\n      }\n\n      // Incorrect request setup\n      return new MisconfigurationError(error.message)\n    }\n\n    return new SpreeSDKError(error.message)\n  }\n\n  protected processSpreeError(error: FetchError): SpreeError {\n    const { error: errorSummary, errors } = error.data\n    const errorClass = this.classifySpreeError(error)\n\n    if (errorClass === ErrorClass.FULL) {\n      return new ExpandedSpreeError(error.response, errorSummary, errors)\n    } else if (errorClass === ErrorClass.BASIC) {\n      return new BasicSpreeError(error.response, errorSummary)\n    } else {\n      return new SpreeError(error.response)\n    }\n  }\n\n  protected spreeOrderHeaders(tokens: IToken): { [headerName: string]: string } {\n    const header = {}\n\n    if (tokens.orderToken) {\n      header['X-Spree-Order-Token'] = tokens.orderToken\n    }\n\n    if (tokens.bearerToken) {\n      header['Authorization'] = `Bearer ${tokens.bearerToken}`\n    }\n\n    return header\n  }\n}\n","import Http from '../Http'\nimport type {\n  IAccountResult,\n  IAccountConfirmationResult,\n  IAccountConfirmation,\n  AccountAddressesResult,\n  AccountAddressResult,\n  AccountAddressParams,\n  AccountAddressResponse,\n  ForgotPasswordParams,\n  ResetPasswordParams,\n  IAccount,\n  AccountAddressesResponse\n} from '../interfaces/Account'\nimport type { ICreditCard, ICreditCardResult, ICreditCards, ICreditCardsResult } from '../interfaces/CreditCard'\nimport type { NoContentResponse, NoContentResult } from '../interfaces/NoContent'\nimport type { IOrder, IOrderResult, IOrders, IOrdersResult } from '../interfaces/Order'\nimport type { IQuery } from '../interfaces/Query'\nimport type { IToken } from '../interfaces/Token'\nimport routes from '../routes'\n\nexport default class Account extends Http {\n  public async accountInfo(token: IToken, params: IQuery = {}): Promise<IAccountResult> {\n    return await this.spreeResponse<IAccount>('get', routes.accountPath(), token, params)\n  }\n\n  public async creditCardsList(token: IToken, params: IQuery = {}): Promise<ICreditCardsResult> {\n    return await this.spreeResponse<ICreditCards>('get', routes.accountCreditCardsPath(), token, params)\n  }\n\n  public async defaultCreditCard(token: IToken, params: IQuery = {}): Promise<ICreditCardResult> {\n    return await this.spreeResponse<ICreditCard>('get', routes.accountDefaultCreditCardPath(), token, params)\n  }\n\n  public async completedOrdersList(token: IToken, params: IQuery = {}): Promise<IOrdersResult> {\n    return await this.spreeResponse<IOrders>('get', routes.accountCompletedOrdersPath(), token, params)\n  }\n\n  public async completedOrder(token: IToken, orderNumber: string, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('get', routes.accountCompletedOrderPath(orderNumber), token, params)\n  }\n\n  public async create(params: IQuery): Promise<IAccountResult> {\n    return await this.spreeResponse<IAccount>('post', routes.accountPath(), {}, params)\n  }\n\n  public async confirm(confirmationToken: string): Promise<IAccountConfirmationResult> {\n    return await this.spreeResponse<IAccountConfirmation>('get', routes.accountConfirmPath(confirmationToken))\n  }\n\n  public async forgotPassword(params: ForgotPasswordParams): Promise<NoContentResult> {\n    return await this.spreeResponse<NoContentResponse>('post', routes.forgotPasswordPath(), {}, params)\n  }\n\n  public async resetPassword(resetPasswordToken: string, params: ResetPasswordParams): Promise<NoContentResult> {\n    return await this.spreeResponse<NoContentResponse>(\n      'patch',\n      routes.resetPasswordPath(resetPasswordToken),\n      {},\n      params\n    )\n  }\n\n  public async update(token: IToken, params: IQuery): Promise<IAccountResult> {\n    return await this.spreeResponse<IAccount>('patch', routes.accountPath(), token, params)\n  }\n\n  public async addressesList(token: IToken): Promise<AccountAddressesResult> {\n    return await this.spreeResponse<AccountAddressesResponse>('get', routes.accountAddressesPath(), token)\n  }\n\n  public async showAddress(token: IToken, addressId: string, params: IQuery = {}): Promise<AccountAddressResult> {\n    return await this.spreeResponse<AccountAddressResponse>('get', routes.accountAddressPath(addressId), token, params)\n  }\n\n  public async createAddress(token: IToken, params: AccountAddressParams): Promise<AccountAddressResult> {\n    return await this.spreeResponse<AccountAddressResponse>('post', routes.accountAddressesPath(), token, params)\n  }\n\n  public async removeAddress(token: IToken, id: string, params: IQuery = {}): Promise<NoContentResult> {\n    return await this.spreeResponse<NoContentResponse>('delete', routes.accountAddressRemovePath(id), token, params)\n  }\n\n  public async updateAddress(\n    token: IToken,\n    addressId: string,\n    params: AccountAddressParams\n  ): Promise<AccountAddressResult> {\n    return await this.spreeResponse<AccountAddressResponse>(\n      'patch',\n      routes.accountAddressPath(addressId),\n      token,\n      params\n    )\n  }\n}\n","import { authParams, refreshParams, revokeParams } from '../helpers/auth'\nimport Http from '../Http'\nimport type { AuthTokenAttr, RefreshTokenAttr, RevokeTokenAttr } from '../interfaces/Authentication'\nimport type { IOAuthToken, IOAuthTokenResult } from '../interfaces/Token'\nimport type { EmptyObjectResponse, EmptyObjectResult } from '../interfaces/EmptyObject'\nimport routes from '../routes'\n\nexport default class Authentication extends Http {\n  public async getToken(params: AuthTokenAttr): Promise<IOAuthTokenResult> {\n    return await this.spreeResponse<IOAuthToken>('post', routes.oauthTokenPath(), {}, authParams(params))\n  }\n  public async refreshToken(params: RefreshTokenAttr): Promise<IOAuthTokenResult> {\n    return await this.spreeResponse<IOAuthToken>('post', routes.oauthTokenPath(), {}, refreshParams(params))\n  }\n  public async revokeToken(params: RevokeTokenAttr): Promise<EmptyObjectResult> {\n    return await this.spreeResponse<EmptyObjectResponse>('post', routes.oauthRevokePath(), {}, revokeParams(params))\n  }\n}\n","import Http from '../Http'\nimport type { AddItem, CouponCode, EstimateShippingMethods, SetQuantity, AssociateCart } from '../interfaces/endpoints/CartClass'\nimport type { IEstimatedShippingMethods, IEstimatedShippingMethodsResult } from '../interfaces/EstimatedShippingMethod'\nimport type { IOrder, IOrderResult } from '../interfaces/Order'\nimport type { NoContentResponse, NoContentResult } from '../interfaces/NoContent'\nimport type { IQuery } from '../interfaces/Query'\nimport type { IToken } from '../interfaces/Token'\nimport routes from '../routes'\n\nexport default class Cart extends Http {\n  public async show(token: IToken, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('get', routes.cartPath(), token, params)\n  }\n\n  public async create(token?: IToken, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('post', routes.cartPath(), token, params)\n  }\n\n  public async addItem(token: IToken, params: AddItem): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('post', routes.cartAddItemPath(), token, params)\n  }\n\n  public async removeItem(token: IToken, id: string, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('delete', routes.cartRemoveItemPath(id), token, params)\n  }\n\n  public async emptyCart(token: IToken, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('patch', routes.cartEmptyPath(), token, params)\n  }\n\n  public async remove(token: IToken, params: IQuery = {}): Promise<NoContentResult> {\n    return await this.spreeResponse<NoContentResponse>('delete', routes.cartPath(), token, params)\n  }\n\n  public async setQuantity(token: IToken, params: SetQuantity): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('patch', routes.cartSetItemQuantity(), token, params)\n  }\n\n  public async applyCouponCode(token: IToken, params: CouponCode): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('patch', routes.cartApplyCodePath(), token, params)\n  }\n\n  public async removeCouponCode(token: IToken, code: string = null, params: IQuery = {}): Promise<IOrderResult> {\n    let route = ''\n\n    if (code !== null) {\n      route = routes.cartRemoveCodePath(code)\n    } else {\n      route = routes.cartRemoveCodePath('')\n    }\n\n    return await this.spreeResponse<IOrder>('delete', route, token, params)\n  }\n\n  public async estimateShippingMethods(\n    token: IToken,\n    params: EstimateShippingMethods\n  ): Promise<IEstimatedShippingMethodsResult> {\n    return await this.spreeResponse<IEstimatedShippingMethods>(\n      'get',\n      routes.cartEstimateShippingMethodsPath(),\n      token,\n      params\n    )\n  }\n\n  public async associateGuestCart(token: IToken, params: AssociateCart): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('patch', routes.cartAssociatePath(), token, params)\n  }\n}\n","import Http from '../Http'\nimport type { AddStoreCredit, NestedAttributes } from '../interfaces/endpoints/CheckoutClass'\nimport type { IOrder, IOrderResult } from '../interfaces/Order'\nimport type { IPaymentMethods, IPaymentMethodsResult } from '../interfaces/PaymentMethod'\nimport type { IQuery } from '../interfaces/Query'\nimport type { IShippingMethods, IShippingMethodsResult } from '../interfaces/ShippingMethod'\nimport type { IToken } from '../interfaces/Token'\nimport routes from '../routes'\n\nexport default class Checkout extends Http {\n  public async orderNext(token: IToken, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('patch', routes.checkoutNextPath(), token, params)\n  }\n\n  public async orderUpdate(token: IToken, params: NestedAttributes): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('patch', routes.checkoutPath(), token, params)\n  }\n\n  public async advance(token: IToken, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('patch', routes.checkoutAdvancePath(), token, params)\n  }\n\n  public async complete(token: IToken, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('patch', routes.checkoutCompletePath(), token, params)\n  }\n\n  public async addStoreCredits(token: IToken, params: AddStoreCredit): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('post', routes.checkoutAddStoreCreditsPath(), token, params)\n  }\n\n  public async removeStoreCredits(token: IToken, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('post', routes.checkoutRemoveStoreCreditsPath(), token, params)\n  }\n\n  public async paymentMethods(token: IToken): Promise<IPaymentMethodsResult> {\n    return await this.spreeResponse<IPaymentMethods>('get', routes.checkoutPaymentMethodsPath(), token)\n  }\n\n  public async shippingMethods(token: IToken, params: IQuery = {}): Promise<IShippingMethodsResult> {\n    return await this.spreeResponse<IShippingMethods>('get', routes.checkoutShippingMethodsPath(), token, params)\n  }\n}\n","import Http from '../Http'\nimport type { ICountries, ICountriesResult, ICountry, ICountryResult } from '../interfaces/Country'\nimport type { IQuery } from '../interfaces/Query'\nimport routes from '../routes'\n\nexport default class Countries extends Http {\n  public async list(): Promise<ICountriesResult> {\n    return await this.spreeResponse<ICountries>('get', routes.countriesPath())\n  }\n\n  public async show(iso: string, params: IQuery = {}): Promise<ICountryResult> {\n    return await this.spreeResponse<ICountry>('get', routes.countryPath(iso), {}, params)\n  }\n}\n","import Http from '../Http'\nimport type { IOrder, IOrderResult } from '../interfaces/Order'\nimport type { IQuery } from '../interfaces/Query'\nimport type { IToken } from '../interfaces/Token'\nimport routes from '../routes'\n\nexport default class Order extends Http {\n  public async status(token: IToken, orderNumber: string, params: IQuery = {}): Promise<IOrderResult> {\n    return await this.spreeResponse<IOrder>('get', routes.orderStatusPath(orderNumber), token, params)\n  }\n}\n","import Http from '../Http'\nimport type { IPage, IPageResult, IPages, IPagesResult } from '../interfaces/Page'\nimport type { IQuery } from '../interfaces/Query'\nimport routes from '../routes'\n\nexport default class Pages extends Http {\n  public async list(params: IQuery = {}): Promise<IPagesResult> {\n    return await this.spreeResponse<IPages>('get', routes.pagesPath(), {}, params)\n  }\n\n  public async show(id: string, params: IQuery = {}): Promise<IPageResult> {\n    return await this.spreeResponse<IPage>('get', routes.pagePath(id), {}, params)\n  }\n}\n","import Http from '../Http'\nimport type { IProduct, IProductResult, IProducts, IProductsResult } from '../interfaces/Product'\nimport type { IProductsQuery } from '../interfaces/Query'\nimport type { IToken } from '../interfaces/Token'\nimport routes from '../routes'\n\nexport default class Products extends Http {\n  public async list(token: IToken = {}, params: IProductsQuery = {}): Promise<IProductsResult> {\n    return await this.spreeResponse<IProducts>('get', routes.productsPath(), token, params)\n  }\n\n  public async show(id: string, token: IToken = {}, params: IProductsQuery = {}): Promise<IProductResult> {\n    return await this.spreeResponse<IProduct>('get', routes.productPath(id), token, params)\n  }\n}\n","import Http from '../Http'\nimport type { IQuery } from '../interfaces/Query'\nimport type { ITaxon, ITaxonResult, ITaxons, ITaxonsResult } from '../interfaces/Taxon'\nimport routes from '../routes'\n\nexport default class Taxons extends Http {\n  public async list(params: IQuery = {}): Promise<ITaxonsResult> {\n    return await this.spreeResponse<ITaxons>('get', routes.taxonsPath(), {}, params)\n  }\n\n  public async show(id: string, params: IQuery = {}): Promise<ITaxonResult> {\n    return await this.spreeResponse<ITaxon>('get', routes.taxonPath(id), {}, params)\n  }\n}\n","import Account from './Account'\nimport Authentication from './Authentication'\nimport Cart from './Cart'\nimport Checkout from './Checkout'\nimport Countries from './Countries'\nimport Order from './Order'\nimport Pages from './Pages'\nimport Products from './Products'\nimport Taxons from './Taxons'\n\nexport { Account, Authentication, Cart, Checkout, Countries, Order, Products, Pages, Taxons }\n","import type { RawFetchResponse } from '../interfaces/RawFetchResponse'\nimport SpreeError from './SpreeError'\n\nclass BasicSpreeError extends SpreeError {\n  public summary: string\n\n  constructor(serverResponse: RawFetchResponse, errorsSummary: string) {\n    super(serverResponse)\n    Object.setPrototypeOf(this, BasicSpreeError.prototype)\n    this.name = 'BasicSpreeError'\n    this.summary = errorsSummary\n  }\n}\n\nexport default BasicSpreeError\n","import SpreeSDKError from './SpreeSDKError'\n\nexport default class CastError extends SpreeSDKError {\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, CastError.prototype)\n    this.name = 'CastError'\n  }\n}\n","import SpreeSDKError from './SpreeSDKError'\n\nexport default class DeserializeError extends SpreeSDKError {\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, DeserializeError.prototype)\n    this.name = 'DeserializeError'\n  }\n}\n","import SpreeSDKError from './SpreeSDKError'\n\nexport default class DocumentRelationshipError extends SpreeSDKError {\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, DocumentRelationshipError.prototype)\n    this.name = 'DocumentRelationshipError'\n  }\n}\n","import get from 'lodash/get'\nimport { Errors, FieldErrors } from '../interfaces/errors/Errors'\nimport type { RawFetchResponse } from '../interfaces/RawFetchResponse'\nimport BasicSpreeError from './BasicSpreeError'\n\nexport default class ExpandedSpreeError extends BasicSpreeError {\n  public errors: Errors\n\n  constructor(serverResponse: RawFetchResponse, errorsSummary: string, errors: { [fieldPath: string]: FieldErrors }) {\n    super(serverResponse, errorsSummary)\n    Object.setPrototypeOf(this, ExpandedSpreeError.prototype)\n    this.name = 'ExpandedSpreeError'\n    this.errors = Object.keys(errors).reduce((acc, fieldPath) => {\n      const keys = fieldPath.split('.')\n      let key = keys.shift()\n      let node = acc\n\n      while (key) {\n        if (!node[key]) {\n          if (keys.length === 0) {\n            node[key] = errors[fieldPath]\n          } else {\n            node[key] = {}\n          }\n        }\n\n        node = node[key]\n        key = keys.shift()\n      }\n\n      return acc\n    }, {})\n  }\n\n  public getErrors(path: string[]): Errors | FieldErrors | null {\n    return get(this.errors, path, null)\n  }\n}\n","import type { RawFetchRequest } from '../interfaces/RawFetchRequest'\nimport type { RawFetchResponse } from '../interfaces/RawFetchResponse'\nimport SpreeSDKError from './SpreeSDKError'\n\nexport default class FetchError extends SpreeSDKError {\n  public response?: RawFetchResponse\n  public request?: RawFetchRequest\n  public data?: any\n\n  constructor(response?: RawFetchResponse, request?: unknown, data?: unknown, message?: string) {\n    super(message)\n    Object.setPrototypeOf(this, FetchError.prototype)\n    this.name = 'FetchError'\n    this.response = response\n    this.request = request\n    this.data = data\n  }\n}\n","import SpreeSDKError from './SpreeSDKError'\n\nexport default class MisconfigurationError extends SpreeSDKError {\n  constructor(message: string) {\n    super(`Incorrect request setup: ${message}`)\n    Object.setPrototypeOf(this, MisconfigurationError.prototype)\n    this.name = 'MisconfigurationError'\n  }\n}\n","import SpreeSDKError from './SpreeSDKError'\n\nexport default class NoResponseError extends SpreeSDKError {\n  constructor() {\n    super('No response received from Spree')\n    Object.setPrototypeOf(this, NoResponseError.prototype)\n    this.name = 'NoResponseError'\n  }\n}\n","import type { RawFetchResponse } from '../interfaces/RawFetchResponse'\nimport SpreeSDKError from './SpreeSDKError'\n\nexport default class SpreeError extends SpreeSDKError {\n  public serverResponse: RawFetchResponse\n\n  constructor(serverResponse: RawFetchResponse) {\n    super(`Spree returned a HTTP ${serverResponse.status} error code`)\n    Object.setPrototypeOf(this, SpreeError.prototype)\n    this.name = 'SpreeError'\n    this.serverResponse = serverResponse\n  }\n}\n","export default class SpreeSDKError extends Error {\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, SpreeSDKError.prototype)\n    this.name = 'SpreeSDKError'\n  }\n}\n","import BasicSpreeError from './BasicSpreeError'\nimport ExpandedSpreeError from './ExpandedSpreeError'\nimport MisconfigurationError from './MisconfigurationError'\nimport NoResponseError from './NoResponseError'\nimport SpreeError from './SpreeError'\nimport SpreeSDKError from './SpreeSDKError'\nimport FetchError from './FetchError'\nimport DocumentRelationshipError from './DocumentRelationshipError'\n\nexport {\n  BasicSpreeError,\n  ExpandedSpreeError,\n  MisconfigurationError,\n  NoResponseError,\n  SpreeError,\n  SpreeSDKError,\n  FetchError,\n  DocumentRelationshipError\n}\n","import * as qs from 'qs'\nimport type { AxiosInstance } from 'axios'\nimport type { CreateFetcher } from '../interfaces/ClientConfig'\nimport FetchError from '../errors/FetchError'\n\nconst createAxiosFetcher: CreateFetcher = (fetcherOptions) => {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const Axios = require('axios')\n\n  const axios: AxiosInstance = Axios.create({\n    baseURL: fetcherOptions.host,\n    headers: { 'Content-Type': 'application/json' },\n    paramsSerializer: (params) => {\n      return qs.stringify(params, { arrayFormat: 'brackets' })\n    }\n  })\n\n  return {\n    fetch: async (fetchOptions) => {\n      try {\n        const { url, params, method, headers } = fetchOptions\n        let payload\n\n        switch (method.toUpperCase()) {\n          case 'PUT':\n          case 'POST':\n          case 'DELETE':\n          case 'PATCH':\n            payload = { data: params }\n            break\n          default:\n            payload = { params }\n        }\n\n        const response = await axios({\n          url,\n          method: method.toUpperCase(),\n          headers,\n          ...payload\n        })\n\n        return { data: response.data }\n      } catch (error) {\n        if (Axios.isAxiosError(error)) {\n          const { response } = error\n\n          if (!response) {\n            throw new FetchError(null, error.request, null, error.message)\n          }\n\n          const reducedResponse = { ...response }\n\n          // Reduce logging by removing the 'enumerable' flag on some keys in AxiosResponse.\n          Object.defineProperties(reducedResponse, {\n            config: { enumerable: false },\n            data: { enumerable: false },\n            headers: { enumerable: false },\n            request: { enumerable: false }\n          })\n\n          throw new FetchError(reducedResponse, error.request, reducedResponse.data, error.message)\n        }\n\n        throw new FetchError(null, null, null, error.message)\n      }\n    }\n  }\n}\n\nexport default createAxiosFetcher\n","import * as qs from 'qs'\nimport FetchError from '../errors/FetchError'\nimport type { CreateFetcher } from '../interfaces/ClientConfig'\nimport type { CreateCustomizedFetchFetcher } from '../interfaces/CreateCustomizedFetchFetcher'\n\n// declare const FETCH_TYPE: string\ndeclare const __non_webpack_require__: (module: string) => any\n\nconst createCustomizedFetchFetcher: CreateCustomizedFetchFetcher = (fetcherOptions) => {\n  const sharedHeaders = { 'Content-Type': 'application/json' }\n\n  const { host, fetch, requestConstructor } = fetcherOptions\n\n  return {\n    fetch: async (fetchOptions) => {\n      try {\n        const { url, params, method, headers } = fetchOptions\n        const absoluteUrl = new URL(url, host)\n        let payload\n\n        switch (method.toUpperCase()) {\n          case 'PUT':\n          case 'POST':\n          case 'DELETE':\n          case 'PATCH':\n            payload = { body: JSON.stringify(params) }\n            break\n          default:\n            payload = null\n            absoluteUrl.search = qs.stringify(params, { arrayFormat: 'brackets' })\n        }\n\n        const request = new requestConstructor(absoluteUrl.toString(), {\n          method: method.toUpperCase(),\n          headers: { ...sharedHeaders, ...headers },\n          ...payload\n        })\n\n        try {\n          const response = await fetch(request)\n          const responseContentType = response.headers.get('content-type')\n          let data\n\n          if (\n            !responseContentType ||\n            (!responseContentType.includes('application/json') &&\n              !responseContentType.includes('application/vnd.api+json'))\n          ) {\n            data = await response.text()\n          } else {\n            data = await response.json()\n          }\n\n          if (!response.ok) {\n            // Use the \"traditional\" approach and reject non 2xx responses.\n            throw new FetchError(response, request, data)\n          }\n\n          return { data }\n        } catch (error) {\n          if (error instanceof FetchError) {\n            throw error\n          }\n\n          throw new FetchError(null, request, null, error.message)\n        }\n      } catch (error) {\n        if (error instanceof FetchError) {\n          throw error\n        }\n\n        throw new FetchError(null, null, null, error.message)\n      }\n    }\n  }\n}\n\nconst createFetchFetcher: CreateFetcher = (fetcherOptions) => {\n  let fetch\n  let Request\n\n  if (globalThis.fetch && globalThis.Request) {\n    fetch = globalThis.fetch\n    Request = globalThis.Request\n  } else {\n    const nodeFetch = __non_webpack_require__('node-fetch')\n\n    fetch = nodeFetch.default\n    Request = nodeFetch.Request\n  }\n\n  return createCustomizedFetchFetcher({ fetch, requestConstructor: Request, ...fetcherOptions })\n}\n\nexport { createCustomizedFetchFetcher }\n\nexport default createFetchFetcher\n","import { AuthTokenAttr, AuthTokenParams, RefreshTokenAttr, RefreshTokenParams, RevokeTokenAttr, RevokeTokenParams } from '../interfaces/Authentication'\n\nexport const authParams = ({ username, password }: AuthTokenAttr): AuthTokenParams => ({\n  username,\n  password,\n  grant_type: 'password'\n})\n\nexport const refreshParams = ({ refresh_token }: RefreshTokenAttr): RefreshTokenParams => ({\n  refresh_token,\n  grant_type: 'refresh_token'\n})\n\nexport const revokeParams = ({ token }: RevokeTokenAttr): RevokeTokenParams => ({\n  token\n})\n","import MisconfigurationError from '../errors/MisconfigurationError'\nimport createAxiosFetcher from '../fetchers/createAxiosFetcher'\nimport createFetchFetcher from '../fetchers/createFetchFetcher'\nimport type { CreateFetcherConfig, Fetcher, IClientConfig } from '../interfaces/ClientConfig'\n\nconst createFetcherFromType = (options: IClientConfig): Fetcher => {\n  const fetcherOptions: CreateFetcherConfig = { host: options.host }\n\n  switch (options.fetcherType) {\n    case 'axios':\n      return createAxiosFetcher(fetcherOptions)\n    case 'fetch':\n      return createFetchFetcher(fetcherOptions)\n    case 'custom':\n      return options.createFetcher(fetcherOptions)\n    default:\n      throw new MisconfigurationError(`${options['fetcher']} is not supported as a fetcher type.`)\n  }\n}\n\nexport default createFetcherFromType\n","import type { JsonApiDocument, JsonApiResponse } from '../interfaces/JsonApi'\nimport type { RelationType } from '../interfaces/Relationships'\nimport { DocumentRelationshipError } from '../errors'\n\nconst findDocument = <DocumentType extends JsonApiDocument>(\n  spreeSuccessResponse: JsonApiResponse,\n  relationType: RelationType\n): DocumentType | null => {\n  if (!spreeSuccessResponse.included) {\n    return null\n  }\n\n  return (\n    (spreeSuccessResponse.included.find(\n      (includedObject) => includedObject.type === relationType.type && includedObject.id === relationType.id\n    ) as DocumentType) || null\n  )\n}\n\nconst findRelationshipDocuments = <DocumentType extends JsonApiDocument>(\n  spreeSuccessResponse: JsonApiResponse,\n  sourceDocument: JsonApiDocument,\n  relationshipName: string\n): DocumentType[] => {\n  if (!spreeSuccessResponse.included) {\n    return []\n  }\n\n  const oneOrManyDocumentReferences = (sourceDocument.relationships[relationshipName] || {}).data\n\n  if (!oneOrManyDocumentReferences) {\n    throw new DocumentRelationshipError(`Incorrect relationship ${relationshipName}.`)\n  }\n\n  let documentReferences: RelationType[]\n\n  if (Array.isArray(oneOrManyDocumentReferences)) {\n    documentReferences = oneOrManyDocumentReferences\n  } else {\n    documentReferences = [oneOrManyDocumentReferences]\n  }\n\n  return documentReferences\n    .map<DocumentType>((relationType: RelationType) => findDocument<DocumentType>(spreeSuccessResponse, relationType))\n    .filter(Boolean)\n}\n\nconst findSingleRelationshipDocument = <DocumentType extends JsonApiDocument>(\n  spreeSuccessResponse: JsonApiResponse,\n  sourceDocument: JsonApiDocument,\n  relationshipName: string\n): DocumentType | null => {\n  const documents = findRelationshipDocuments<DocumentType>(spreeSuccessResponse, sourceDocument, relationshipName)\n\n  if (documents.length === 0) {\n    return null\n  }\n\n  return documents[0]\n}\n\nexport { findDocument, findRelationshipDocuments, findSingleRelationshipDocument }\n","import * as errors from '../errors'\nimport CastError from '../errors/CastError'\nimport DeserializeError from '../errors/DeserializeError'\nimport { Result } from '../interfaces/Result'\n\nconst makeSuccess = <F extends Error, S>(value: S): Result<F, S> => {\n  return {\n    isSuccess: () => true,\n    isFail: () => false,\n    success: () => value,\n    fail: () => {\n      throw new Error('Cannot call fail() on success.')\n    }\n  }\n}\n\nconst makeFail = <F extends Error, S>(value: F): Result<F, S> => {\n  return {\n    isSuccess: () => false,\n    isFail: () => true,\n    success: () => {\n      throw new Error('Cannot call success() on fail.')\n    },\n    fail: () => value\n  }\n}\n\n/**\n * Converts a Result instance into its JSON representation.\n * Not all information is preserved from the Result instance.\n * Most notably, non-enumerable properties are skipped.\n */\nconst toJson = <F extends Error, S>(result: Result<F, S>): { type: string; subtype: string; value?: any } => {\n  if (result.isSuccess()) {\n    return {\n      type: 'SpreeSDKResult',\n      subtype: 'success',\n      value: result.success()\n    }\n  } else {\n    return {\n      type: 'SpreeSDKResult',\n      subtype: 'fail',\n      value: { ...result.fail() }\n    }\n  }\n}\n\nconst castError = (error: { name: string; message: string; stack? }): errors.SpreeSDKError => {\n  if (!(error.name in errors)) {\n    throw new CastError('Error not recognized')\n  }\n\n  return Object.assign(Object.create(errors[error.name].prototype), error)\n}\n\n/**\n * Converts JSON to a Result instance.\n * If the JSON represents a fail, converts the error into an instance of SpreeSDKError its subtype.\n */\nconst fromJson = (json: { [key: string]: any }): Result<errors.SpreeSDKError, any> => {\n  if (json.type === 'SpreeSDKResult') {\n    if (json.subtype === 'success') {\n      return makeSuccess(json.value)\n    } else if (json.subtype === 'fail') {\n      return makeFail(castError(json.value))\n    } else {\n      throw new DeserializeError('Expected success or fail subtype.')\n    }\n  }\n\n  throw new DeserializeError('Unknown signature.')\n}\n\nexport { makeSuccess, makeFail, toJson, fromJson }\n","import Client from './Client'\nimport * as errors from './errors'\nimport * as result from './helpers/result'\nimport * as jsonApi from './helpers/jsonApi'\nimport Http from './Http'\nimport routes, { storefrontPath } from './routes'\nimport * as endpoints from './endpoints'\nimport makeClient from './makeClient'\n\nexport { Client, Http, result, errors, makeClient, endpoints, routes, storefrontPath, jsonApi }\n","export enum ErrorClass {\n  BASIC,\n  FULL,\n  LIMITED\n}\n","import Client from './Client'\nimport type { OptionalIClientConfig } from './interfaces/ClientConfig'\n\nconst makeClient = (config: OptionalIClientConfig): Client => new Client(config)\n\nexport default makeClient\n","export const storefrontPath = `api/v2/storefront`\n\nconst endpoints = {\n  productsPath: (): string => `${storefrontPath}/products`,\n  productPath: (id: string): string => `${storefrontPath}/products/${id}`,\n  taxonsPath: (): string => `${storefrontPath}/taxons`,\n  taxonPath: (id: string): string => `${storefrontPath}/taxons/${id}`,\n  countriesPath: (): string => `${storefrontPath}/countries`,\n  countryPath: (iso: string): string => `${storefrontPath}/countries/${iso}`,\n  cartPath: (): string => `${storefrontPath}/cart`,\n  cartAddItemPath: (): string => `${storefrontPath}/cart/add_item`,\n  cartRemoveItemPath: (id: string): string => `${storefrontPath}/cart/remove_line_item/${id}`,\n  cartEmptyPath: (): string => `${storefrontPath}/cart/empty`,\n  cartSetItemQuantity: (): string => `${storefrontPath}/cart/set_quantity`,\n  cartApplyCodePath: (): string => `${storefrontPath}/cart/apply_coupon_code`,\n  cartRemoveCodePath: (code?: string): string => `${storefrontPath}/cart/remove_coupon_code/${code}`,\n  cartEstimateShippingMethodsPath: (): string => `${storefrontPath}/cart/estimate_shipping_rates`,\n  cartAssociatePath: (): string => `${storefrontPath}/cart/associate`,\n  checkoutPath: (): string => `${storefrontPath}/checkout`,\n  checkoutNextPath: (): string => `${storefrontPath}/checkout/next`,\n  checkoutAdvancePath: (): string => `${storefrontPath}/checkout/advance`,\n  checkoutCompletePath: (): string => `${storefrontPath}/checkout/complete`,\n  checkoutAddStoreCreditsPath: (): string => `${storefrontPath}/checkout/add_store_credit`,\n  checkoutRemoveStoreCreditsPath: (): string => `${storefrontPath}/checkout/remove_store_credit`,\n  checkoutPaymentMethodsPath: (): string => `${storefrontPath}/checkout/payment_methods`,\n  checkoutShippingMethodsPath: (): string => `${storefrontPath}/checkout/shipping_rates`,\n  oauthTokenPath: (): string => `spree_oauth/token`,\n  oauthRevokePath: (): string => `spree_oauth/revoke`,\n  accountPath: (): string => `${storefrontPath}/account`,\n  accountAddressPath: (id: string): string => `${storefrontPath}/account/addresses/${id}`,\n  accountAddressesPath: (): string => `${storefrontPath}/account/addresses`,\n  accountAddressRemovePath: (id: string): string => `${storefrontPath}/account/addresses/${id}`,\n  accountConfirmPath: (confirmationToken: string): string =>\n    `${storefrontPath}/account_confirmations/${confirmationToken}`,\n  accountCreditCardsPath: (): string => `${storefrontPath}/account/credit_cards`,\n  accountDefaultCreditCardPath: (): string => `${storefrontPath}/account/credit_cards/default`,\n  accountCompletedOrdersPath: (): string => `${storefrontPath}/account/orders`,\n  accountCompletedOrderPath: (orderNumber: string): string => `${storefrontPath}/account/orders/${orderNumber}`,\n  forgotPasswordPath: (): string => `${storefrontPath}/passwords`,\n  resetPasswordPath: (resetPasswordToken: string): string => `${storefrontPath}/passwords/${resetPasswordToken}`,\n  orderStatusPath: (orderNumber: string): string => `${storefrontPath}/order_status/${orderNumber}`,\n  pagesPath: (): string => `${storefrontPath}/cms_pages`,\n  pagePath: (id: string): string => `${storefrontPath}/cms_pages/${id}`\n}\n\nexport default endpoints\n","module.exports = require(\"axios\");","module.exports = require(\"lodash/get\");","module.exports = require(\"qs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(341);\n"],"names":["root","factory","exports","module","define","amd","a","i","global","constructor","customOptions","options","host","globalThis","process","env","SPREE_HOST","fetcherType","this","fetcher","createFetcher","addEndpoints","account","makeAccount","authentication","makeAuthentication","cart","makeCart","checkout","makeCheckout","countries","makeCountries","order","makeOrder","pages","makePages","products","makeProducts","taxons","makeTaxons","Account","Authentication","Cart","Checkout","Countries","Order","Pages","Products","Taxons","method","url","tokens","params","fetchOptions","headers","spreeOrderHeaders","response","fetch","result","makeSuccess","data","error","makeFail","processError","classifySpreeError","errorSummary","errors","ErrorClass","FULL","BASIC","LIMITED","processSpreeError","request","NoResponseError","MisconfigurationError","message","SpreeSDKError","errorClass","ExpandedSpreeError","BasicSpreeError","SpreeError","header","orderToken","bearerToken","token","spreeResponse","accountPath","accountCreditCardsPath","accountDefaultCreditCardPath","accountCompletedOrdersPath","orderNumber","accountCompletedOrderPath","confirmationToken","accountConfirmPath","forgotPasswordPath","resetPasswordToken","resetPasswordPath","accountAddressesPath","addressId","accountAddressPath","id","accountAddressRemovePath","oauthTokenPath","authParams","refreshParams","oauthRevokePath","revokeParams","cartPath","cartAddItemPath","cartRemoveItemPath","cartEmptyPath","cartSetItemQuantity","cartApplyCodePath","code","route","cartRemoveCodePath","cartEstimateShippingMethodsPath","cartAssociatePath","checkoutNextPath","checkoutPath","checkoutAdvancePath","checkoutCompletePath","checkoutAddStoreCreditsPath","checkoutRemoveStoreCreditsPath","checkoutPaymentMethodsPath","checkoutShippingMethodsPath","countriesPath","iso","countryPath","orderStatusPath","pagesPath","pagePath","productsPath","productPath","taxonsPath","taxonPath","serverResponse","errorsSummary","super","Object","setPrototypeOf","prototype","name","summary","CastError","DeserializeError","DocumentRelationshipError","keys","reduce","acc","fieldPath","split","key","shift","node","length","getErrors","path","FetchError","status","Error","fetcherOptions","Axios","axios","create","baseURL","paramsSerializer","qs","stringify","arrayFormat","async","payload","toUpperCase","isAxiosError","reducedResponse","defineProperties","config","enumerable","createCustomizedFetchFetcher","sharedHeaders","requestConstructor","absoluteUrl","URL","body","JSON","search","toString","responseContentType","get","includes","json","text","ok","Request","nodeFetch","default","username","password","grant_type","refresh_token","findDocument","spreeSuccessResponse","relationType","included","find","includedObject","type","findRelationshipDocuments","sourceDocument","relationshipName","oneOrManyDocumentReferences","relationships","documentReferences","Array","isArray","map","filter","Boolean","findSingleRelationshipDocument","documents","value","isSuccess","isFail","success","fail","toJson","subtype","fromJson","assign","castError","Client","jsonApi","Http","routes","storefrontPath","endpoints","makeClient","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}